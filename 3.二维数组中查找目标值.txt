法一：右上开始找
public class Solution {
    public boolean Find(int target, int [][] array) {
        
        if(array==null||array.length==0){
            return false;
        }
        
        int hang=array.length;
        int lie=array[0].length;
        
        int i=0,j=lie-1; 
        //i为行数 j为列数
        //起点为右上
        while(i<hang && j>=0){
            if(array[i][j]==target){
                return true;
            }
            if(array[i][j]<target){   //当前值小于目标值,行数加一
                i++;
            }else{                    //当前值大于目标值，列数减一
                j--;                  //（本行找不到则，j值越界为-1输出法拉瑟）
            }
        }
        
        return false;
    }
}
法二：二分法
public class Solution {
    public boolean Find(int target, int [][] array) {
        
        //二分法
        for(int i=0;i<array.length;i++){        //每行中进行二分
            
            int low=0;                        //起点
            int high=array[i].length-1;       //终点
            //每行元素下标 low-right 之间
            
            while(low<=high){
                int mid=(low+high)/2;        //二分
                if(target==array[i][mid]){
                    return true;
                }
                if(target>array[i][mid]){    //比目标元素小 将起点设为mid+1
                    low=mid+1;
                }
                if(target<array[i][mid]){    //比目标元素大 将终点设为mid+-1
                    high=mid-1;
                }
            }
            
        }
        
        return false;
    }
}