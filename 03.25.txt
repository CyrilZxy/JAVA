import java.util.*;

/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/

public class Partition {
    public ListNode partition(ListNode pHead, int x) {
        // write code here
        
        if(pHead == null || pHead.next == null)
        {
            return pHead;
        }
        
        ListNode head1= new ListNode(-1);
        ListNode head2= new ListNode(-1);
        ListNode cur1=head1;
        ListNode cur2=head2;
        
        ListNode cur=pHead;
        
        while(cur!=null){
            if(cur.val<x){                           		 //将val小于x的节点，追加给head1
                cur1.next=new ListNode(cur.val);
                cur1=cur1.next;
                cur=cur.next;
            }else{                                    		//将val大于等于x的节点，追加给head2
                cur2.next=new ListNode(cur.val);
                cur2=cur2.next;
                cur=cur.next;
            }
        }
        
        //寻找head1的尾节点
        cur1=head1;
        while(cur1.next != null){
            cur1 = cur1.next;
        }

        //找到最后一个节点，此时为cur1.     在连接head2
        cur1.next = head2.next;
        return head1.next;

    }
}

