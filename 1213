//1.头插法   不带头
    public void addFirst(int data) {
        ListNode node = new ListNode(data);
        if (head == null) {
            head = node;          //第一次插入
        } else {
            node.next = head;         //node的下一个节点指向head地址
            head = node;              //将head地址变更为node地址
        }
    }


    //2.尾插法
    public void addLast(int data) {
        ListNode cur = this.head;
        ListNode node = new ListNode(data);
        if (head == null) {
            this.head = node;      //第一次插入
        } else {
            while (cur.next != null) {
                cur = cur.next;
            }
            cur.next = node;
        }

    }


    //3.插入到index位置  位置号从0开始记 插入位置有getlength+1个
    // getlength为节点个数    index=0;头插   index=getlength；尾插
    public void addIndex(int index,int data){        //插入位置，插入值

        if(index < 0 || index > getLength()) {  //判断插入位置是否合法
            System.out.print("位置不合法"+"  ");
        }
        else if(index == 0) {             //头插法
            addFirst(data);
        }
        else{
            ListNode prev = searchIndex(index);     //找插入点的 前后
            ListNode node = new ListNode(data);     //new一个节点
            node.next = prev.next;      //新节点next指向 插入点后的next  与插入点后拼接
            prev.next = node;           //插入点的next指向新节点地址   与插入点前拼接
        }

    }
    public int getLength() {            //节点长度 及节点个数
        int count = 0;
        ListNode cur = this.head;
        while (cur != null) {
            count++;
            cur = cur.next;
        }
        return count;
    }
    private ListNode searchIndex(int index) {        //找到index-1位置的节点
        //prev-->index-1;                               返回当前节点的引用
        ListNode prev = this.head;
        int count = 0;
        while (count < index-1) {
            prev = prev.next;
            count++;
        }
        return prev;
    }
